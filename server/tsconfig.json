{
  "compilerOptions": {
    /* Basic Options */
    /*
    target ES5의 기본 값: dom, es5, scripthost
    target ES6의 기본 값: dom, dom.iterable, es6, scripthost
    */
    "target": "es5", /* 컴파일 후 생성될 파일의 ECMAScript 대상 버전 지정: 'ES3'(기본값), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021' 또는 'ESNEXT'. */
    "module": "commonjs", /* 컴파일 후 생성될 파일이 사용하는 모듈 버전 지정: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020' 또는 'ESNext'. */
    "lib": [
      "es5",
      "DOM",
      "DOM.Iterable",
    ], /* 컴파일에 포함될 라이브러리 파일을 지정합니다. */
    "allowJs": true, /* 자바스크립트 파일이 컴파일되도록 허용합니다. */
    "checkJs": true, /* .js 파일의 오류를 보고합니다. */
    // "declaration": true, /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true, /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true, /* 해당 '.map' 파일을 생성합니다. */
    // "outFile": "./", /* 출력을 연결하여 단일 파일로 내보냅니다. */
    "outDir": "./dist", /* 출력 구조를 디렉터리로 리디렉션합니다. */
    // "rootDir": "./", /* 입력 파일의 루트 디렉터리를 지정합니다. --outDir을 사용하여 출력 디렉토리 구조를 제어하는 ​​데 사용합니다. */
    // "composite": true, /* 프로젝트 컴파일 활성화 */
    // "tsBuildInfoFile": "./", /* 증분 컴파일 정보를 저장할 파일 지정 */
    // "removeComments": true, /* 출력에 주석을 내보내지 않습니다. */
    // "noEmit": true, /* 출력을 내보내지 않습니다. */
    // "importHelpers": true, /* 'tslib'에서 방출 도우미를 가져옵니다. */
    "downlevelIteration": true, /* 'ES5' 또는 'ES3'을 대상으로 할 때 'for-of', Spread 및 Destructuring에서 이터러블을 완벽하게 지원합니다. */
    // "isolatedModules": true, /* 각 파일을 별도의 모듈로 변환합니다('ts.transpileModule'과 유사). */

    /* 엄격한 유형 검사 옵션 */
    "strict": true, /* 모든 엄격한 유형 검사 옵션을 활성화합니다. */
    "noImplicitAny": true, /* 묵시적 'any' 유형이 있는 표현식 및 선언에서 오류 발생. */
    // "strictNullChecks": true, /* 엄격한 null 검사를 활성화합니다. */
    // "strictFunctionTypes": true, /* 함수 유형의 엄격한 검사를 활성화합니다. */
    // "strictBindCallApply": true, /* 함수에서 엄격한 'bind', 'call' 및 'apply' 메서드를 활성화합니다. */
    // "strictPropertyInitialization": true, /* 클래스의 속성 초기화에 대한 엄격한 검사를 활성화합니다. */
    // "noImplicitThis": true, /* 묵시적 'any' 유형이 있는 'this' 표현식에서 오류 발생. */
    // "alwaysStrict": true, /* 엄격 모드에서 구문 분석하고 각 소스 파일에 대해 "use strict"를 내보냅니다. */

/* 추가 검사 */
    // "noUnusedLocals": true, /* 사용하지 않는 로컬에 대한 오류를 보고합니다. */
    // "noUnusedParameters": true, /* 사용하지 않는 매개변수에 대한 오류를 보고합니다. */
    // "noImplicitReturns": true, /* 함수의 모든 코드 경로가 값을 반환하지 않는 경우 오류를 보고합니다. */
    "noFallthroughCasesInSwitch": true, /* switch 문의 폴스루 케이스에 대한 오류를 보고합니다. */
    // "noUncheckedIndexedAccess": true, /* 인덱스 서명 결과에 'undefined' 포함 */
    // "noImplicitOverride": true, /* 파생 클래스의 재정의 멤버가 'override' 수정자로 표시되는지 확인합니다. */
    // "noPropertyAccessFromIndexSignature": true, /* 요소 액세스를 사용하려면 인덱스 서명에서 선언되지 않은 속성이 필요합니다. */

    /* 모듈 해상도 옵션 */
    // "moduleResolution": "node", /* 모듈 확인 전략을 지정합니다. 'node'(Node.js) 또는 'classic'(TypeScript 1.6 이전). */
    "baseUrl": "./", /* 절대적이지 않은 모듈 이름을 확인하기 위한 기본 디렉토리. */
    "paths": {
      "@*": ["./src/*"],
    }, /* 'baseUrl'과 관련된 조회 위치로 가져오기를 다시 매핑하는 일련의 항목. */
    // "rootDirs": [], /* 결합된 콘텐츠가 런타임 시 프로젝트의 구조를 나타내는 루트 폴더 목록입니다. */
    // "typeRoots": [], /* 유형 정의를 포함할 폴더 목록입니다. */
    // "types": [], /* 컴파일에 포함될 유형 선언 파일. */
    // "allowSyntheticDefaultImports": true, /* 기본 내보내기가 없는 모듈에서 기본 가져오기를 허용합니다. 이것은 코드 방출에 영향을 미치지 않고 단지 유형 검사에 영향을 미칩니다. */
    "esModuleInterop": true, /* 모든 가져오기에 대한 네임스페이스 개체 생성을 통해 CommonJS와 ES 모듈 간의 방출 상호 운용성을 활성화합니다. 'allowSyntheticDefaultImports'를 의미합니다. */
    // "preserveSymlinks": true, /* 심볼릭 링크의 실제 경로를 확인하지 않습니다. */
    // "allowUmdGlobalAccess": true, /* 모듈에서 UMD 전역 액세스를 허용합니다. */

    /* 소스 맵 옵션 */
    // "sourceRoot": "", /* 디버거가 소스 위치 대신 TypeScript 파일을 찾아야 하는 위치를 지정합니다. */
    // "mapRoot": "", /* 디버거가 생성된 위치 대신 맵 파일을 찾아야 하는 위치를 지정합니다. */
    // "inlineSourceMap": true, /* 별도의 파일 대신 소스 맵이 있는 단일 파일을 내보냅니다. */
    // "inlineSources": true, /* 단일 파일 내에서 소스맵과 함께 소스를 내보냅니다. '--inlineSourceMap' 또는 '--sourceMap'을 설정해야 합니다. */

    /* 실험 옵션 */
    // "experimentalDecorators": true, /* ES7 데코레이터에 대한 실험 지원을 활성화합니다. */
    // "emitDecoratorMetadata": true, /* 데코레이터에 대한 유형 메타데이터 방출에 대한 실험적 지원을 활성화합니다. */

    /* 고급 옵션 */
    "skipLibCheck": true, /* 선언 파일의 유형 검사를 건너뜁니다. */
    "forceConsistentCasingInFileNames": true /* 동일한 파일에 대해 대소문자가 일치하지 않는 참조를 허용하지 않습니다 */
  },
  "include": [  
    "**/*.ts",
    "**/*.js",
    "src/**/*",
    ".eslintrc.js"
  ],  
  "exclude": [  
    "node_modules"  
  ]
}
